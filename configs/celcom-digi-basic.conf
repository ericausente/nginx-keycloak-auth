log_format jwt '$remote_addr - $remote_user [$time_local] "$request" '
               '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
               '$jwt_header_alg $jwt_claim_sub $jwt_claim_iss $jwt_payload $roles';

# Define upstream for backend services

upstream backend_service {
        server 127.0.0.1:8069;  # Replace with actual backend service
    }

resolver 127.0.0.1;

js_import /etc/nginx/conf.d/oauth_token.js;

server {
        listen 80;
        server_name nginx.example.com;
        error_log /var/log/nginx/error_jwt.log info;
        access_log /var/log/nginx/access_jwt.log jwt;

        # Location to validate JWT
        location /api {

        auth_request /_oauth2_token_introspection;
        auth_request_set $access_token $sent_http_token_access_token;  # Extract access_token
        auth_request_set $expires_in $sent_http_token_expires_in;      # Extract expires_in
        auth_request_set $scope $sent_http_token_scope;                # Extract scope
        proxy_set_header Authorization "Bearer $access_token";         # Forward token to backend
        proxy_set_header X-Token-Expires $expires_in;                  # Forward expiry time
        proxy_set_header X-Token-Scope $scope;                         # Forward scope
            proxy_pass http://backend_service;
        }

        # NJS function to handle token introspection
        location = /_oauth2_token_introspection {
        internal;
        js_content oauth_token.introspectAccessToken;
        }

        # Token Introspection Endpoint
        location /_oauth2_send_request {
        internal;
        proxy_method      POST;
        proxy_set_header  Content-Type "application/x-www-form-urlencoded";
        proxy_set_body    "grant_type=client_credentials";
        proxy_ssl_server_name on;
        proxy_pass        https://keycloak.example.com/realms/celcomdigi-realm/protocol/openid-connect/token;
        }
}
